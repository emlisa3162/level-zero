on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions: read-all

defaults:
  run:
    shell: bash

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.const.outputs.short-sha }}
      ref-slug: ${{ steps.const.outputs.ref-slug }}
      build-matrix: ${{ steps.build-matrix.outputs.matrix }}
      image-matrix: ${{ steps.image-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4
      with:
        clean: true
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Set constants
      id: const
      run: |
        cat >> ${GITHUB_OUTPUT} <<EOF
        short-sha=$(git rev-parse --short=7 ${GITHUB_SHA})
        ref-slug=$(echo ${{ github.ref_name }} | tr '/_' '-')
        EOF
    - name: Generate build matrix
      id: build-matrix
      run: '
        echo ''matrix={
          "os":[
            {"name":"ubuntu", "vmaj":"20", "vmin":"04"},
            {"name":"ubuntu", "vmaj":"22", "vmin":"04"},
            {"name":"sles", "vmaj":"15", "vmin":"2"},
            {"name":"sles", "vmaj":"15", "vmin":"3"},
            {"name":"sles", "vmaj":"15", "vmin":"4"},
            {"name":"rhel", "vmaj":"8", "vmin":"6"},
            {"name":"windows"}
          ],
          "target":["install", "package"],
          "arch":[""],
          "include":[
            {"os":{"name":"ubuntu", "vmaj":"20", "vmin":"04"}, "target":"install", "arch":"arm64"},
            {"os":{"name":"ubuntu", "vmaj":"20", "vmin":"04"}, "target":"package", "arch":"arm64"}
          ]
        }'' | tee -a ${GITHUB_OUTPUT} | sed "s/matrix\=\(.*\)/\1/" | jq .'
    - name: Generate image build matrix
      id: image-matrix
      run: |
        echo 'matrix={"os":'$(echo '${{ steps.build-matrix.outputs.matrix }}' | jq -c .os)'}' |
        tee -a ${GITHUB_OUTPUT} | sed "s/matrix\=\(.*\)/\1/" | jq .

  image:
    runs-on: ${{ matrix.os.name == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    needs: [config]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.config.outputs.image-matrix) }}
    env:
      OS_STRING: >-
        ${{ matrix.os.name == 'windows' && 'windows' ||
            format('{0}-{1}.{2}',
              matrix.os.name,
              matrix.os.vmaj,
              matrix.os.vmin
            )
        }}
      DOCKER_BUILDKIT: ${{ matrix.os.name == 'windows' && '0' || '1' }}
    steps:
    - name: Compute image name
      run: echo "DOCKER_IMAGE=localhost/${{ github.repository }}/${OS_STRING}" >> ${GITHUB_ENV}
    - uses: actions/checkout@v4
      with:
        clean: true
        submodules: true
    - name: "Registry login: ghcr.io"
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} |
        docker login -u sys-lzdev --password-stdin ghcr.io
    - name: Setup buildkit builder
      if: env.DOCKER_BUILDKIT == '1'
      id: buildx-builder
      uses: docker/setup-buildx-action@v3
    - name: Build image
      run: |
        docker info
        docker \
        ${{ env.DOCKER_BUILDKIT == '0' && 'build' || 'buildx build --load' }} \
        ${{ runner.os == 'Windows' && '  \
          --memory 16G ' || '  '
        }}\
        ${{ matrix.os.vmaj != '' && format('  \
          --build-arg VMAJ={0} \
          --build-arg VMIN={1} ', matrix.os.vmaj, matrix.os.vmin) || '  '
        }}\
          --pull \
          --tag ${DOCKER_IMAGE}:${{ needs.config.outputs.ref-slug }} \
          - < .github/docker/${{ matrix.os.name }}.Dockerfile
    - name: Save image
      run: docker save ${DOCKER_IMAGE}:${{ needs.config.outputs.ref-slug }} -o ./${{ env.OS_STRING }}.tar
    - name: Save image ID
      run: echo "$(docker images --format '{{.ID}}' ${DOCKER_IMAGE}:${{ needs.config.outputs.ref-slug }})" > ./${{ env.OS_STRING }}.id
    - name: Upload image
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.OS_STRING }}
        path: ./${{ env.OS_STRING }}.*

  build:
    # Notes on formatting:
    #
    # GitHub Actions expressions ${{ ... }} are used wherever possible so the
    # evaluation results are plainly visible in the web console.
    #
    # Note the mixed spaces and tabs in the heredocs, see the bash man page
    # entry for <<- in the Here Documents section. This allows generated code to
    # be indented for readability in the workflow output.
    needs: [config, image]
    runs-on: ${{ matrix.os.name == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    # Always run build even if the image step failed, except if the job was cancelled
    if: >-
      always() &&
      ! cancelled() &&
      needs.config.result == 'success'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.config.outputs.build-matrix) }}
    env:
      MSYS_NO_PATHCONV: 1
      MOUNT_TARGET:  ${{ matrix.os.name == 'windows' && 'C:/project' || '/project' }}
      # -j breaks the Visual Studio configuration selection
      PARALLEL: ${{ ! (matrix.os.name == 'windows') && '-j' || '' }}
      ARCH_SUFFIX: ${{ matrix.arch != '' && format('_{0}', matrix.arch) || '' }}
    steps:
    - name: Set constants
      id: const
      env:
        OS_STRING: >-
          ${{ matrix.os.name == 'windows' && 'windows' ||
              format('{0}-{1}.{2}',
                matrix.os.name,
                matrix.os.vmaj,
                matrix.os.vmin
              )
          }}
        CCACHE_DIR: ${{ github.workspace }}/ccache
      run: |
        cat >> ${GITHUB_OUTPUT} <<EOF
        os-string=${OS_STRING}
        image-name=ghcr.io/${{ github.repository }}/${OS_STRING}
        ccache-dir=${CCACHE_DIR}
        EOF
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Create Ccache directory
      run: mkdir -p '${{ steps.const.outputs.ccache-dir }}'
    - name: Ccache
      uses: actions/cache@v4
      with:
        path: ${{ steps.const.outputs.ccache-dir }}
        key: ccache-${{ github.job }}-${{ steps.const.outputs.os-string }}${{ env.ARCH_SUFFIX }}-${{ matrix.target }}-${{ github.sha }}
        restore-keys: ccache-${{ github.job }}-${{ steps.const.outputs.os-string }}${{ env.ARCH_SUFFIX }}-${{ matrix.target }}-
    - name: Download image
      uses: actions/download-artifact@v4
      with:
        name: ${{ steps.const.outputs.os-string }}
    - name: Load image
      run: docker load -i ./${{ steps.const.outputs.os-string }}.tar
    - name: Get image ID
      id: image-id
      run: echo "id=$(cat ./${{ steps.const.outputs.os-string }}.id)" >> ${GITHUB_OUTPUT}
    - name: Build
      id: build
      run: |
        mkdir build
        docker run \
          --rm \
          --interactive \
          -v '${{ github.workspace }}':${MOUNT_TARGET} \
          -w ${MOUNT_TARGET}/build \
          -e CCACHE_BASEDIR=${MOUNT_TARGET} \
          -e CCACHE_DIR=${MOUNT_TARGET}/ccache \
          -v '${{ steps.const.outputs.ccache-dir }}':${MOUNT_TARGET}/ccache \
          ${{ steps.image-id.outputs.id }} \
          bash -e -x <<-EOF

        	cmake \
        ${{ matrix.os.name != 'windows' && '	  \
        	  -G Ninja ' || '	  '
        }}\
        ${{ matrix.arch == 'arm64' && '	  \
        	  -D CMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
        	  -D CMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
        	  -D CMAKE_SYSTEM_PROCESSOR=aarch64 ' || '	  '
        }}\
        	  -D CMAKE_C_COMPILER_LAUNCHER=ccache \
        	  -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
        	  -D CMAKE_BUILD_TYPE=Release \
        	  -D CMAKE_INSTALL_PREFIX=${{ matrix.target == 'install' && '../level-zero-install' || matrix.target == 'package' && '/usr' || '' }} \
        	  -D CPACK_OUTPUT_FILE_PREFIX=${MOUNT_TARGET}/level-zero-package \
        	  ..
        	
        	cmake --build . ${PARALLEL} --target ${{ matrix.target }} ${{ matrix.os.name == 'windows' && '--config Release' || '' }}
        	
        	ccache --show-stats
        	
        	EOF
